{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"","text":"<p>             A data analysis framework  for exoplanet detection         </p> Documentation"},{"location":"docs/","title":"Welcome","text":"<p>kima is the name of a really good drink produced in Azores  And now, it's also a package for the analysis of radial velocity (RV) data.</p> <p> </p> <p>In brief, kima fits Keplerian curves to a set of RV measurements, using the Diffusive Nested Sampling algorithm<sup>1</sup> to sample the posterior distribution for the model parameters. Additionally, the code can calculate the fully marginalized likelihood (or evidence, \\(Z\\)) of a model with a given number of Keplerians and also infer the number (\\(N_p\\)) of Keplerian signals detected in a given dataset. In this case, \\(N_p\\) is a free parameter and its posterior distribution is estimated<sup>2</sup><sup>, </sup><sup>3</sup>.</p> <p>The code is under active development at  this  GitHub repository. This page hosts the documentation, examples, and detailed APIs.</p> <p>If you use kima in your work or research, we kindly ask that you include the following citation<sup>4</sup></p> <pre><code>Faria et al., (2018). kima: Exoplanet detection in radial velocities.\nJournal of Open Source Software, 3(26), 487\n</code></pre> <p>Feel free to use the following BibTeX entry, or see the ADS entry 2018JOSS....3..487F.</p> <pre><code>@article{kima,\n      title = {kima: Exoplanet detection in radial velocities},\n      author = {Faria, J. P. and Santos, N. C. and Figueira, P. and Brewer, B. J.},\n      journal = {Journal of Open Source Software},\n      issn = {2475-9066},\n      number = {26},\n      volume = {3},\n      pages = {487},\n      date = {2018-06-19},\n      year = {2018},\n      month = {6},\n      day = {19},\n      publisher = {The Open Journal},\n      doi = {10.21105/joss.00487},\n      url = {http://dx.doi.org/10.21105/joss.00487},\n}\n</code></pre>"},{"location":"docs/#references","title":"References","text":"<ol> <li> <p>Brewer, B.J., P\u00e1rtay, L.B. &amp; Cs\u00e1nyi, G. Diffusive Nested Sampling. Stat    Comput 21, 649\u2013656 (2011) arXiv,   DOI \u21a9</p> </li> <li> <p>Brewer, B.J., Inference for Trans-dimensional Bayesian Models with   Diffusive Nested Sampling (2015) arXiv \u21a9</p> </li> <li> <p>Brewer, B.J. and Donovan, C.P., Fast Bayesian inference for exoplanet   discovery in radial velocity data, MNRAS 448, 4, 3206\u20133214 (2015) arXiv,   DOI \u21a9</p> </li> <li> <p>Faria et al., kima: Exoplanet detection in radial velocities. Journal of   Open Source Software, 3(26), 487 (2018) arXiv,   DOI \u21a9</p> </li> </ol>"},{"location":"docs/getting-started/","title":"Getting started","text":"<p>To get started, read in a dataset and choose one of the available models:</p> <pre><code>import kima\nfrom kima import RVData, RVmodel\n\ndata = RVData('my_dataset')\n\nmodel = RVmodel(fix=True, npmax=1, data=data)\n</code></pre> <p>and then run the model</p> <pre><code>kima.run(model, steps=1000)\n</code></pre> <p>The resulting posteriors can be loaded and analysed easily (more information here)</p> <pre><code>res = kima.load_results()\n</code></pre>"},{"location":"docs/getting-started/#running-the-examples","title":"Running the examples","text":"<p>kima comes packed with ready-to-run examples.  All of them are described to some length here.</p>"},{"location":"docs/getting-started/#finding-51-peg-b","title":"Finding 51 Peg b","text":"<p>One of the examples involves the detection of 51 Peg b in Keck/HIRES data. Running it is as simple as </p> <pre><code>from kima.examples import _51Peg\n\nmodel = _51Peg(run=True)\n</code></pre> <p>and the results are loaded with</p> <pre><code>res = kima.load_results()\n\nres.plot1() #(1)\nres.plot2() #(2)\n</code></pre> <ol> <li>shows the posterior for the number of planets \\(N_p\\)</li> <li>shows the posterior for the orbital period, with a clear peak at 4.23 days</li> </ol>"},{"location":"docs/installation/","title":"Installation","text":"<p>kima can easily be installed using pip:</p> <pre><code>pip install kima\n</code></pre> <p></p> <p>Installation is tested on Linux, Windows, and MacOS regularly. If the following badge is green, things should be working  (even if it's red, go ahead and try it anyway )</p> <p></p> <p>Danger</p> <p>The installation process compiles the C++ code using CMake, and requires at least CMake v3.17, which should be easy to install (or update) on most platforms. See this official page for more information.</p> <p>Alternatively, you can also clone the  GitHub repository</p> <pre><code>git clone https://github.com/kima-org/kima.git\n</code></pre> <p>and install the package locally</p> <pre><code>cd kima\npip install -e .\n</code></pre> <p>If the installation fails, open an issue here.</p>"},{"location":"docs/models/","title":"Models","text":""},{"location":"docs/models/#types-of-models","title":"Types of models","text":"<p>kima currently implements dedicated models for different analyses of a given dataset. The models share a common organization, but each has its own parameters, priors, and settings.</p> <ul> <li> <p>RVmodel   Models the RVs with a sum-of-Keplerians</p> </li> <li> <p>GPmodel   Models the RVs with a sum-of-Keplerians plus a correlated noise component   given by a Gaussian process</p> </li> <li> <p>RVFWHMmodel   Models the RVs together with the FWHM as an activity indicator, including a   Gaussian process for the activity signal</p> </li> <li> <p>BINARIESmodel   This includes tidal and relativistic effects as well as apsidal precession of   the binary\u2019s orbit (applicable for circumbinary planets), and can also fit    double-lined binary data. More details are available in   Baycroft et al. (2023).</p> </li> <li> <p>TRANSITmodel (coming soon)</p> </li> <li>GAIAmodel (comming soon)</li> </ul> <p>To use a given model, just instantiate an object of the respective class providing the necessary options and a dataset</p> kima_setup.py<pre><code>from kima import RVmodel, GPmodel\n\ndata = ...\n\nmodel = RVmodel(fix=True, npmax=1, data=data)\n# or\nmodel = GPmodel(fix=True, npmax=1, data=data)\n</code></pre> Info <p>The arguments to the models can be provided as positional arguments, as in <pre><code>RVmodel(True, 1, data)\n</code></pre> but this is discouraged for being less readable.  Note, however, that there are not default values for these arguments,  as the keyword syntax could lead to believe.</p> <p>Each model has its own parameters and particular settings,  which are described in detail in the API page. Below we include a more mathematical description of each model.</p> RVmodelGPmodel <p>This is the most basic model, but already allows for an in-depth analysis  of an RV dataset. In terms of general settings, we can define</p> <pre><code>model = RVmodel(fix=True, npmax=1, data=data) # (4)\n\nmodel.trend = False / True\nmodel.degree = 0 / 1 / 2 / 3 # (1)\n\nmodel.set_known_object(1) # (2)\n\nmodel.studentt = False / True # (3)\n</code></pre> <ol> <li> <p>sets up a long-term trend in the RVs, of a given degree. This is a  linear trend for <code>degree=1</code>, a quadratic for <code>degree=2</code>, and a cubic for  <code>degree=3</code>. Higher degree trends are not implemented.</p> </li> <li> <p>In known object (KO!) mode, kima considers some Keplerians as part  of a \"background\" model (see below). This can be useful when modelling  transiting planets or simply planets with better-known orbital parameters. </p> </li> <li> <p>Whether to use a Student-t distribution as the likelihood, instead of a Gaussian. If this is set to <code>True</code>, the degrees of freedom of the Student-t distribution can be estimated from the data. This is sometimes useful when the RV data is suspected to contain (a few) strong outliers.  See the example for more information.</p> </li> <li> <p>See below for more information</p> </li> </ol> <p>This model considers a Gaussian process as a surrogate model for the  stellar activity signal present in the RVs. It uses the now standard  quasi-periodic kernel with four hyper-parameters:</p> \\[ k(t_i, t_j) = \\eta_1^2                  \\exp\\left[-\\frac{t_i - t_j}{\\eta_2^2}\\right]                  \\exp\\left[-\\frac{\\sin^2\\left(\\frac{t_i - t_j}{\\eta_3}\\right)}{2 \\eta_4^2}\\right] \\] <p>Most of the same settings as for the <code>RVmodel</code> are available, except for <code>studentt</code> which doesn't apply in this case.</p> <pre><code>model = GPmodel(fix=True, npmax=1) # (3)\n\nmodel.trend = False / True\nmodel.degree = 0 / 1 / 2 / 3 # (1)\n\nmodel.set_known_object(1) # (2)      \n</code></pre> <ol> <li> <p>sets up a long-term trend in the RVs, of a given degree. This is a    linear trend for <code>degree=1</code>, a quadratic for <code>degree=2</code>, and a cubic for    <code>degree=3</code>. Higher degree trends are not implemented.</p> </li> <li> <p>In known object (KO!) mode, kima considers some Keplerians as part    of a \"background\" model (see below). This can be useful when modelling    transiting planets or simply planets with better-known orbital parameters. </p> </li> <li> <p>See below for more information</p> </li> </ol>"},{"location":"docs/models/#the-np-planets","title":"The Np planets","text":"<p>kima can model Keplerian functions, the RV signals induced by planets. But the distinguishing feature is that the code can actually model a number \\(N_p\\) of Keplerians, and this number does not need to be fixed a priori. In other words, kima estimates the joint posterior distribution for \\(N_p\\) and the orbital parameters of the planets \\(\\theta\\), given some data \\(\\mathcal{D}\\):</p> \\[ p(N_p, \\theta | \\mathcal{D} ) \\] <p>So \\(N_p\\) is actually a free parameter in the model (if we want). It is somewhat of a special parameter, in that it only takes discrete values, but it's otherwise similar to other parameters in the model. In particular, it needs a prior distribution as well.</p> <p>This part of the model can be set with the first two arguments to the constructors</p> <pre><code>model = RVmodel(fix=False, npmax=2, data=data)\n</code></pre> <p>which define whether or not \\(N_p\\) is fixed and its value or prior distribution</p> \\[     N_p      \\begin{cases}         = \\texttt{npmax},                       &amp; \\text{if}\\:\\texttt{fix}\\\\         \\sim \\mathcal{U}(0, \\texttt{npmax}),    &amp; \\text{otherwise}     \\end{cases} \\] <p>By default, each of the \\(N_p\\) planets has 5 orbital parameters</p> \\[ \\theta = { P, K, e, M_0, \\omega } \\] <p>corresponding to the orbital period, semi-amplitude, eccentricity, mean anomaly at the epoch, and argument of periastron.</p> <p>Some models include additional per-planet parameters: the <code>BINARIESmodel</code> considers a linear precession parameter \\(\\dot\\omega\\) and the BDmodel infers a mixture probability \\(\\lambda\\) for each planet.</p> <p>units</p> <ul> <li>\\(P\\) is in [days]</li> <li>\\(K\\) is in [m/s]</li> <li>\\(e\\) is unitless</li> <li>\\(M_0\\) and \\(\u03c9\\) are in radians</li> </ul> <p>By default, the epoch is set to the first observed time, but it can be changed by setting the corresponding attribute of the data:</p> <pre><code>data.M0_epoch = ...\n</code></pre>"},{"location":"docs/models/#the-background-model","title":"The \"background\" model","text":"<p>Besides the \\(N_p\\) planets, kima models the RV observations as follows</p> <ul> <li>by default</li> </ul> \\[ v_i \\sim \\mathcal{N} \\left( v_{sys} \\,,\\: j^2+\\sigma_i^2 \\right) \\] <ul> <li>if using a Student-t likelihood</li> </ul> \\[ v_i \\sim \\mathcal{T} \\left( v_{sys} \\,,\\: j^2+\\sigma_i^2, \\nu \\right) \\] <ul> <li>if using a Gaussian process</li> </ul> \\[ v \\sim \\mathcal{GP} \\left( \\boldsymbol{\\mu} = v_{sys} \\,,\\: \\boldsymbol{\\Sigma} = {\\bf K} + (j^2+\\sigma_i^2)\\,\\delta_{ij}\\,{\\bf I} \\right) \\] <p>where \\(j\\) is a jitter parameter that represents additional white noise variations not accounted for by the individual uncertainties. </p> <p>When considering a long-term trend (by setting <code>trend=True</code>), instead of a constant systemic velocity, we have</p> \\[ \\begin{aligned} v_{sys} \\rightarrow v_{sys}    &amp; + \\text{slope} \\times (t-t_m) \\qquad      \\text{if} \\: \\texttt{degree} \\ge 1\\\\   &amp; + \\text{quadr} \\times (t-t_m)^2 \\quad\\,   \\text{if} \\: \\texttt{degree} \\ge 2\\\\   &amp; + \\text{cubic} \\times (t-t_m)^3 \\quad\\:\\: \\text{if} \\: \\texttt{degree} = 3 \\end{aligned} \\] <p>where \\(t_m\\) is the mean of the times and slope, quadr, and cubic are free parameters. See the example for more information.</p> <p>When using data from multiple instruments, kima adds RV offsets between pairs of instruments as well as individual jitter parameters per instrument.</p>"},{"location":"docs/models/#model-parameters","title":"Model parameters","text":"<p>How many parameters?</p> <p>The number of free parameters can change substantially with each model,  with the different settings, and with the specific parameter priors.</p>"},{"location":"docs/models/#prior-distributions","title":"Prior distributions","text":"<p>As in any Bayesian analysis, kima needs a set of priors for the model parameters. If we don't explicitly set the priors, default ones will be  used and the model will run. But sometimes we will want to set custom priors for some parameters.</p> <p>To change specific priors, we just need to re-assign some attributes of the models, using the probability distributions defined in kima.distributions. Admittedly, some of these attributes might have rather undescriptive names,  but they are still documented individually.</p> <p>For example, let's re-define the priors for the jitter and for the orbital periods of the \\(N_p\\) planets</p> <pre><code>from kima.distributions import Uniform, Gaussian\n\nmodel = RVmodel(...)\n\nmodel.Jprior = Uniform(1, 20)  # (1)\n\nmodel.conditional.Pprior = Gaussian(15, 0.1)\n</code></pre> <ol> <li> Note that this is a uniform distribution from 1 m/s to 20 m/s, unlike the <code>scipy.stats.uniform</code> distribution which would have support [1, 21] !</li> </ol> <p>While it might seem counter-intuitive at first, the priors for the orbital parameters are the same for all of the \\(N_p\\) planets. This is intentional! But if this is not what you want, consider using the known object feature.</p> <p><code>conditional</code> priors</p> <p>The priors for the orbital parameters of the \\(N_p\\) Keplerians are included in the <code>model.conditional</code> object because these priors are  conditional on having those Keplerians.</p> <p>In the example above, we specify the prior distribution and its parameters. The list of currently implemented distributions is described here. If you need a distribution that is not yet implemented, consider opening an issue.</p>"},{"location":"docs/models/#default-priors","title":"Default priors","text":"<p>Below is the list of default priors which are used if not explicitly re-defined</p> RVmodelGPmodel <ul> <li> <p>orbital period(s), <code>conditional.Pprior</code>   LogUniform(1, \\(\\Delta t\\)), where \\(\\Delta t\\) is the timespan of the data</p> </li> <li> <p>semi-amplitude(s), <code>conditional.Kprior</code>   Uniform(1, \\(\\Delta v\\)), where \\(\\Delta v\\) is the span of the RVs</p> </li> </ul> <p>expand</p> <ul> <li> <p>orbital periods and semi-amplitudes     units: days and m/s, respectively</p> <pre><code>// if hyperpriors = false (default)\nPprior = make_shared&lt;LogUniform&gt;(1.0, 1e5);\nKprior = make_shared&lt;ModifiedLogUniform&gt;(1.0, 1e3);\n\n// if hyperpriors = true\nPprior = make_shared&lt;Laplace&gt;(exp(log_muP), wP);\nKprior = make_shared&lt;Exponential&gt;(exp(log_muK));\n</code></pre> </li> <li> <p>orbital eccentricities     <pre><code>eprior = make_shared&lt;Uniform&gt;(0, 1);\n</code></pre></p> <p>another good option could be <pre><code>eprior = make_shared&lt;Kumaraswamy&gt;(0.867, 3.03);\n</code></pre> which approximates the Beta distribution proposed by Kipping (2013).</p> </li> <li> <p>orbital phase and argument of periastron     units: radians</p> <p>```c++ phiprior = make_shared(0, 2*PI); <p>wprior = make_shared(0, 2*PI);   ``` <li> <p>systemic velocity     units: m/s</p> <pre><code>Cprior = make_prior&lt;Uniform&gt;(data.get_RV_min(), data.get_RV_max());\n</code></pre> </li> <li> <p>additional white noise, or jitter     units: m/s</p> <pre><code>knee = min(1.0, 0.1*data.get_max_RV_span()) \nupper = data.get_max_RV_span()\n\nJprior = make_prior&lt;ModifiedLogUniform&gt;(knee, upper);\n</code></pre> </li> <li> <p>ccoefficients of the trend (if trend=true)     units: m/s/day, m/s/day\u00b2, m/s/day\u00b3   <pre><code>slope_prior = make_prior&lt;Gaussian&gt;(0.0, pow(10, data.get_trend_magnitude(1)));\nquadr_prior = make_prior&lt;Gaussian&gt;(0.0, pow(10, data.get_trend_magnitude(2)));\ncubic_prior = make_prior&lt;Gaussian&gt;(0.0, pow(10, data.get_trend_magnitude(3)));\n</code></pre></p> </li> <li> <p>between-instrument offsets     units: m/s</p> <pre><code>lower = -data.get_RV_span();\nupper = data.get_RV_span();\noffsets_prior = make_prior&lt;Uniform&gt;(lower, upper);\n</code></pre> </li> <p>{% katexmm %}</p> <ul> <li> <p>GP hyperparameters     units: \\(\\eta_1\\) in m/s, \\(\\eta_2\\) and \\(\\eta_3\\) in days</p> <pre><code>log_eta1_prior = make_prior&lt;Uniform&gt;(-5, 5);\n\neta2_prior = make_prior&lt;LogUniform&gt;(1, 100);\n\neta3_prior = make_prior&lt;Uniform&gt;(10, 40);\n\nlog_eta4_prior = make_prior&lt;Uniform&gt;(-1, 1);\n</code></pre> </li> </ul> <p>{% endkatexmm %}</p> <ul> <li> <p>degrees of freedom for Student-t likelihood</p> <pre><code>nu_prior = make_prior&lt;LogUniform&gt;(2, 1000);\n</code></pre> </li> <li> <p>moving average parameters</p> <pre><code>sigmaMA_prior = make_prior&lt;Uniform&gt;(-1, 1);\ntauMA_prior = make_prior&lt;LogUniform&gt;(1, 100);\n</code></pre> </li> <li> <p>hyperparameters for orbital period and semi-amplitude hierachical priors     only if <code>hyperpriors=true</code></p> <pre><code>log_muP_prior = make_prior&lt;TruncatedCauchy&gt;(log(365), 1.0, log(365)-21, log(365)+21);\n\nwP_prior = make_prior&lt;Uniform&gt;(0.1, 3.0);\n\nlog_muK_prior = make_prior&lt;TruncatedCauchy&gt;(0.0, 1.0, -21.0, 21.0);\n</code></pre> </li> <li> <p>correlation coefficients with activity indicators</p> <pre><code>betaprior = make_prior&lt;Gaussian&gt;(0, 1);\n</code></pre> </li> </ul>"},{"location":"docs/troubleshooting/","title":"Troubleshooting","text":""},{"location":"docs/troubleshooting/#problems-with-installation","title":"Problems with installation","text":"<ul> <li>Make sure you cloned the repository with <code>--recursive</code>, to get the submodules</li> <li> <p>Make sure the version of gcc you are using accepts the option <code>-std=c++11</code>.   Feel free to edit the Makefile and change the <code>CXX</code> variable</p> </li> <li> <p>If you can't get it to work, open an issue    and let's try to fix it.</p> </li> </ul>"},{"location":"docs/troubleshooting/#other-issues","title":"Other issues","text":"<ul> <li>Segmentation fault (core dumped) right at the start.   If you run into a segmentation fault before kima even prints anything to   the terminal, it might be due to the header of the data files. When reading   the data, make sure the <code>skip</code> (the third) parameter to the <code>load</code> or   <code>load_multi</code> functions is set correctly. That is, make sure it matches the   number of lines in the header of the file(s). If using <code>load_multi</code>, also make   sure the headers occupy the same number of lines in all files.</li> </ul>"},{"location":"docs/troubleshooting/#i-think-something-is-wrong","title":"I think something is wrong...","text":"<p>Let us know in the issues if you think there is a problem or if something doesn't work as expected.</p>"},{"location":"docs/troubleshooting/#i-could-do-with-some-help-analysing-rvs","title":"I could do with some help analysing RVs","text":"<p>kima is free software and provided as is within the terms of the LICENSE. However, we are available to help if we can! The issue tracker is a good place to ask questions about kima or the analysis of RV data, but feel free to contact us by email if needed.</p>"},{"location":"docs/API/","title":"API","text":"<p>The two pages below describe the public API of kima and <code>pykima</code> separately.</p> <ul> <li> <p>kima:   the main package </p> </li> <li> <p>pykima:   an helper sub-package to analyse results</p> </li> </ul>"},{"location":"docs/API/kima/","title":"kima API","text":"<p>Most analyses will use the <code>RVData</code> class to load RV data from a set of files or arrays</p>"},{"location":"docs/API/kima/#example","title":"Example:","text":"<pre><code>from kima import RVData\n\ndata = RVData('filename.txt', skip=1)\n</code></pre> <code>kima.RVData</code> API <p>Load and store RV data</p> <p>and then define one of the several models currently implemented</p>"},{"location":"docs/API/kima/#kima.RVData.M0_epoch","title":"<code>M0_epoch: float</code>  <code>property</code>","text":"<p>reference epoch for the mean anomaly</p>"},{"location":"docs/API/kima/#kima.RVData.N","title":"<code>N: int</code>  <code>property</code>","text":"<p>Total number of observations</p>"},{"location":"docs/API/kima/#kima.RVData.actind","title":"<code>actind: list[list[float]]</code>  <code>property</code>","text":"<p>Activity indicators</p>"},{"location":"docs/API/kima/#kima.RVData.instrument","title":"<code>instrument: str</code>  <code>property</code>","text":"<p>instrument name</p>"},{"location":"docs/API/kima/#kima.RVData.multi","title":"<code>multi: bool</code>  <code>property</code>","text":"<p>Data comes from multiple instruments</p>"},{"location":"docs/API/kima/#kima.RVData.obsi","title":"<code>obsi: list[int]</code>  <code>property</code>","text":"<p>The instrument identifier</p>"},{"location":"docs/API/kima/#kima.RVData.sig","title":"<code>sig: list[float]</code>  <code>property</code>","text":"<p>The observed RV uncertainties</p>"},{"location":"docs/API/kima/#kima.RVData.skip","title":"<code>skip: int</code>  <code>property</code>","text":"<p>Lines skipped when reading data</p>"},{"location":"docs/API/kima/#kima.RVData.t","title":"<code>t: list[float]</code>  <code>property</code>","text":"<p>The times of observations</p>"},{"location":"docs/API/kima/#kima.RVData.units","title":"<code>units: str</code>  <code>property</code>","text":"<p>Units of the RVs and uncertainties</p>"},{"location":"docs/API/kima/#kima.RVData.y","title":"<code>y: list[float]</code>  <code>property</code>","text":"<p>The observed radial velocities</p>"},{"location":"docs/API/kima/#kima.RVData.get_RV_span","title":"<code>get_RV_span() -&gt; float</code>  <code>method descriptor</code>","text":"<p>get_RV_span(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.RVData.get_timespan","title":"<code>get_timespan() -&gt; float</code>  <code>method descriptor</code>","text":"<p>get_timespan(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.RVData.load","title":"<code>load() -&gt; None</code>  <code>method descriptor</code>","text":"<p>load(self, filename: str, units: str, skip: int, max_rows: int, delimiter: str, indicators: list[str]) -&gt; None</p> <p>Load RV data from a tab/space separated file with columns <pre><code>time  vrad  error  quant  error\n...   ...   ...    ...    ...\n</code></pre> Args:     filename (str): the name of the file     untis (str): units of the RVs and errors, either \"kms\" or \"ms\"     skip (int): number of lines to skip in the beginning of the file (default = 2)     indicators (list[str]): nodoc</p>"},{"location":"docs/API/kima/#kima.RVData.topslope","title":"<code>topslope() -&gt; float</code>  <code>method descriptor</code>","text":"<p>topslope(self) -&gt; float</p>"},{"location":"docs/API/kima/#example_1","title":"Example:","text":"<pre><code>from kima import RVmodel\n\nmodel = RVmodel(fix=False, npmax=2, data=data)\n</code></pre> <code>kima.RVmodel</code> API <code>kima.GPmodel</code> API <code>kima.RVFWHMmodel</code> API <code>kima.BINARIESmodel</code> API <p>To run the sampler and estimate the posterior for the model parameters just call <code>kima.run</code></p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel","title":"<code>RVmodel()</code>","text":"<p>init(self, fix: bool, npmax: int, data: kima.Data.RVData) -&gt; None</p> <p>Implements a sum-of-Keplerians model where the number of Keplerians can be free.</p> <p>Args:     fix (bool):         whether the number of Keplerians should be fixed     npmax (int):         maximum number of Keplerians     data (RVData):         the RV data</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.Cprior","title":"<code>Cprior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for the systemic velocity</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.Jprior","title":"<code>Jprior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for the extra white noise (jitter)</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.KO_Kprior","title":"<code>KO_Kprior: list[kima.distributions.Distribution]</code>  <code>property</code>","text":"<p>Prior for KO semi-amplitude</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.KO_Pprior","title":"<code>KO_Pprior: list[kima.distributions.Distribution]</code>  <code>property</code>","text":"<p>Prior for KO orbital period</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.KO_eprior","title":"<code>KO_eprior: list[kima.distributions.Distribution]</code>  <code>property</code>","text":"<p>Prior for KO eccentricity</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.KO_phiprior","title":"<code>KO_phiprior: list[kima.distributions.Distribution]</code>  <code>property</code>","text":"<p>Prior for KO mean anomaly(ies)</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.KO_wprior","title":"<code>KO_wprior: list[kima.distributions.Distribution]</code>  <code>property</code>","text":"<p>Prior for KO argument of periastron</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.TR_Kprior","title":"<code>TR_Kprior: list[kima.distributions.Distribution]</code>  <code>property</code>","text":"<p>Prior for TR semi-amplitude</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.TR_Pprior","title":"<code>TR_Pprior: list[kima.distributions.Distribution]</code>  <code>property</code>","text":"<p>Prior for TR orbital period</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.TR_Tcprior","title":"<code>TR_Tcprior: list[kima.distributions.Distribution]</code>  <code>property</code>","text":"<p>Prior for TR mean anomaly(ies)</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.TR_eprior","title":"<code>TR_eprior: list[kima.distributions.Distribution]</code>  <code>property</code>","text":"<p>Prior for TR eccentricity</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.TR_wprior","title":"<code>TR_wprior: list[kima.distributions.Distribution]</code>  <code>property</code>","text":"<p>Prior for TR argument of periastron</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.conditional","title":"<code>conditional: kima.RVmodel.RVConditionalPrior</code>  <code>property</code>","text":"<p>(self) -&gt; kima.RVmodel.RVConditionalPrior</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.cubic_prior","title":"<code>cubic_prior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for the cubic coefficient of the trend</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.data","title":"<code>data: kima.Data.RVData</code>  <code>property</code>","text":"<p>the data</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.degree","title":"<code>degree: int</code>  <code>property</code>","text":"<p>degree of the polynomial trend</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.enforce_stability","title":"<code>enforce_stability: bool</code>  <code>property</code>","text":"<p>whether to enforce AMD-stability</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.fix","title":"<code>fix: bool</code>  <code>property</code>","text":"<p>whether the number of Keplerians is fixed</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.indicator_correlations","title":"<code>indicator_correlations: bool</code>  <code>property</code>","text":"<p>include in the model linear correlations with indicators</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.individual_offset_prior","title":"<code>individual_offset_prior: list[kima.distributions.Distribution]</code>  <code>property</code>","text":"<p>Common prior for the between-instrument offsets</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.known_object","title":"<code>known_object: bool</code>  <code>property</code>","text":"<p>whether the model includes (better) known extra Keplerian curve(s)</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.n_known_object","title":"<code>n_known_object: int</code>  <code>property</code>","text":"<p>how many known objects</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.n_transiting_planet","title":"<code>n_transiting_planet: int</code>  <code>property</code>","text":"<p>how many transiting planets</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.npmax","title":"<code>npmax: int</code>  <code>property</code>","text":"<p>maximum number of Keplerians</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.nu_prior","title":"<code>nu_prior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for the degrees of freedom of the Student-t likelihood</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.offsets_prior","title":"<code>offsets_prior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Common prior for the between-instrument offsets</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.quadr_prior","title":"<code>quadr_prior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for the quadratic coefficient of the trend</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.slope_prior","title":"<code>slope_prior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for the slope</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.star_mass","title":"<code>star_mass: float</code>  <code>property</code>","text":"<p>stellar mass [Msun]</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.stellar_jitter_prior","title":"<code>stellar_jitter_prior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for the stellar jitter (common to all instruments)</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.studentt","title":"<code>studentt: bool</code>  <code>property</code>","text":"<p>use a Student-t distribution for the likelihood (instead of Gaussian)</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.transiting_planet","title":"<code>transiting_planet: bool</code>  <code>property</code>","text":"<p>whether the model includes transiting planet(s)</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.trend","title":"<code>trend: bool</code>  <code>property</code>","text":"<p>whether the model includes a polynomial trend</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.set_known_object","title":"<code>set_known_object()</code>  <code>method descriptor</code>","text":"<p>set_known_object(self, arg: int, /) -&gt; None</p>"},{"location":"docs/API/kima/#kima.RVmodel.RVmodel.set_transiting_planet","title":"<code>set_transiting_planet()</code>  <code>method descriptor</code>","text":"<p>set_transiting_planet(self, arg: int, /) -&gt; None</p>"},{"location":"docs/API/kima/#kima.GPmodel.GPmodel","title":"<code>GPmodel</code>","text":"<p>None</p>"},{"location":"docs/API/kima/#kima.GPmodel.GPmodel.Cprior","title":"<code>Cprior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for the systemic velocity</p>"},{"location":"docs/API/kima/#kima.GPmodel.GPmodel.Jprior","title":"<code>Jprior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for the extra white noise (jitter)</p>"},{"location":"docs/API/kima/#kima.GPmodel.GPmodel.KO_Kprior","title":"<code>KO_Kprior: list[kima.distributions.Distribution]</code>  <code>property</code>","text":"<p>Prior for KO semi-amplitude</p>"},{"location":"docs/API/kima/#kima.GPmodel.GPmodel.KO_Pprior","title":"<code>KO_Pprior: list[kima.distributions.Distribution]</code>  <code>property</code>","text":"<p>Prior for KO orbital period</p>"},{"location":"docs/API/kima/#kima.GPmodel.GPmodel.KO_eprior","title":"<code>KO_eprior: list[kima.distributions.Distribution]</code>  <code>property</code>","text":"<p>Prior for KO eccentricity</p>"},{"location":"docs/API/kima/#kima.GPmodel.GPmodel.KO_phiprior","title":"<code>KO_phiprior: list[kima.distributions.Distribution]</code>  <code>property</code>","text":"<p>Prior for KO mean anomaly(ies)</p>"},{"location":"docs/API/kima/#kima.GPmodel.GPmodel.KO_wprior","title":"<code>KO_wprior: list[kima.distributions.Distribution]</code>  <code>property</code>","text":"<p>Prior for KO argument of periastron</p>"},{"location":"docs/API/kima/#kima.GPmodel.GPmodel.conditional","title":"<code>conditional: kima.RVmodel.RVConditionalPrior</code>  <code>property</code>","text":"<p>(self) -&gt; kima.RVmodel.RVConditionalPrior</p>"},{"location":"docs/API/kima/#kima.GPmodel.GPmodel.cubic_prior","title":"<code>cubic_prior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for the cubic coefficient of the trend</p>"},{"location":"docs/API/kima/#kima.GPmodel.GPmodel.degree","title":"<code>degree: int</code>  <code>property</code>","text":"<p>degree of the polynomial trend</p>"},{"location":"docs/API/kima/#kima.GPmodel.GPmodel.enforce_stability","title":"<code>enforce_stability: bool</code>  <code>property</code>","text":"<p>whether to enforce AMD-stability</p>"},{"location":"docs/API/kima/#kima.GPmodel.GPmodel.eta1_prior","title":"<code>eta1_prior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for \u03b71, the GP 'amplitude'</p>"},{"location":"docs/API/kima/#kima.GPmodel.GPmodel.eta2_prior","title":"<code>eta2_prior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for \u03b72, the GP correlation timescale</p>"},{"location":"docs/API/kima/#kima.GPmodel.GPmodel.eta3_prior","title":"<code>eta3_prior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for \u03b73, the GP period</p>"},{"location":"docs/API/kima/#kima.GPmodel.GPmodel.eta4_prior","title":"<code>eta4_prior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for \u03b74, the recurrence timescale or (inverse) harmonic complexity</p>"},{"location":"docs/API/kima/#kima.GPmodel.GPmodel.known_object","title":"<code>known_object: bool</code>  <code>property</code>","text":"<p>whether the model includes (better) known extra Keplerian curve(s)</p>"},{"location":"docs/API/kima/#kima.GPmodel.GPmodel.n_known_object","title":"<code>n_known_object: int</code>  <code>property</code>","text":"<p>how many known objects</p>"},{"location":"docs/API/kima/#kima.GPmodel.GPmodel.offsets_prior","title":"<code>offsets_prior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Common prior for the between-instrument offsets</p>"},{"location":"docs/API/kima/#kima.GPmodel.GPmodel.quadr_prior","title":"<code>quadr_prior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for the quadratic coefficient of the trend</p>"},{"location":"docs/API/kima/#kima.GPmodel.GPmodel.slope_prior","title":"<code>slope_prior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for the slope</p>"},{"location":"docs/API/kima/#kima.GPmodel.GPmodel.star_mass","title":"<code>star_mass: float</code>  <code>property</code>","text":"<p>stellar mass [Msun]</p>"},{"location":"docs/API/kima/#kima.GPmodel.GPmodel.trend","title":"<code>trend: bool</code>  <code>property</code>","text":"<p>whether the model includes a polynomial trend</p>"},{"location":"docs/API/kima/#kima.GPmodel.GPmodel.set_known_object","title":"<code>set_known_object()</code>  <code>method descriptor</code>","text":"<p>set_known_object(self, arg: int, /) -&gt; None</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel","title":"<code>RVFWHMmodel</code>","text":"<p>None</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.Cprior","title":"<code>Cprior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for the systemic velocity</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.Jprior","title":"<code>Jprior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for the extra white noise (jitter)</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.KO_Kprior","title":"<code>KO_Kprior: list[kima.distributions.Distribution]</code>  <code>property</code>","text":"<p>Prior for KO semi-amplitude</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.KO_Pprior","title":"<code>KO_Pprior: list[kima.distributions.Distribution]</code>  <code>property</code>","text":"<p>Prior for KO orbital period</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.KO_eprior","title":"<code>KO_eprior: list[kima.distributions.Distribution]</code>  <code>property</code>","text":"<p>Prior for KO eccentricity</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.KO_phiprior","title":"<code>KO_phiprior: list[kima.distributions.Distribution]</code>  <code>property</code>","text":"<p>Prior for KO mean anomaly(ies)</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.KO_wprior","title":"<code>KO_wprior: list[kima.distributions.Distribution]</code>  <code>property</code>","text":"<p>Prior for KO argument of periastron</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.conditional","title":"<code>conditional: kima.RVmodel.RVConditionalPrior</code>  <code>property</code>","text":"<p>(self) -&gt; kima.RVmodel.RVConditionalPrior</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.cubic_prior","title":"<code>cubic_prior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for the cubic coefficient of the trend</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.degree","title":"<code>degree: int</code>  <code>property</code>","text":"<p>degree of the polynomial trend</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.enforce_stability","title":"<code>enforce_stability: bool</code>  <code>property</code>","text":"<p>whether to enforce AMD-stability</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.eta1_fwhm_prior","title":"<code>eta1_fwhm_prior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for the GP 'amplitude' on the FWHM</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.eta1_prior","title":"<code>eta1_prior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for the GP 'amplitude' on the RVs</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.eta2_fwhm_prior","title":"<code>eta2_fwhm_prior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for \u03b72, the GP correlation timescale, on the FWHM</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.eta2_prior","title":"<code>eta2_prior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for \u03b72, the GP correlation timescale, on the RVs</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.eta3_fwhm_prior","title":"<code>eta3_fwhm_prior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for \u03b73, the GP period, on the FWHM</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.eta3_prior","title":"<code>eta3_prior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for \u03b73, the GP period, on the RVs</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.eta4_fwhm_prior","title":"<code>eta4_fwhm_prior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for \u03b74, the recurrence timescale or (inverse) harmonic complexity, on the FWHM</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.eta4_prior","title":"<code>eta4_prior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for \u03b74, the recurrence timescale or (inverse) harmonic complexity, on the RVs</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.known_object","title":"<code>known_object: bool</code>  <code>property</code>","text":"<p>whether the model includes (better) known extra Keplerian curve(s)</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.n_known_object","title":"<code>n_known_object: int</code>  <code>property</code>","text":"<p>how many known objects</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.quadr_prior","title":"<code>quadr_prior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for the quadratic coefficient of the trend</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.share_eta2","title":"<code>share_eta2: bool</code>  <code>property</code>","text":"<p>whether the \u03b72 parameter is shared between RVs and FWHM</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.share_eta3","title":"<code>share_eta3: bool</code>  <code>property</code>","text":"<p>whether the \u03b73 parameter is shared between RVs and FWHM</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.share_eta4","title":"<code>share_eta4: bool</code>  <code>property</code>","text":"<p>whether the \u03b74 parameter is shared between RVs and FWHM</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.slope_prior","title":"<code>slope_prior: kima.distributions.Distribution</code>  <code>property</code>","text":"<p>Prior for the slope</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.star_mass","title":"<code>star_mass: float</code>  <code>property</code>","text":"<p>stellar mass [Msun]</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.trend","title":"<code>trend: bool</code>  <code>property</code>","text":"<p>whether the model includes a polynomial trend</p>"},{"location":"docs/API/kima/#kima.RVFWHMmodel.RVFWHMmodel.set_known_object","title":"<code>set_known_object()</code>  <code>method descriptor</code>","text":"<p>set_known_object(self, arg: int, /) -&gt; None</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel","title":"<code>BINARIESmodel</code>","text":""},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.Cprior","title":"<code>Cprior</code>  <code>property</code>","text":"<p>Prior for the systemic velocity</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.Jprior","title":"<code>Jprior</code>  <code>property</code>","text":"<p>Prior for the extra white noise (jitter)</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.KO_Kprior","title":"<code>KO_Kprior</code>  <code>property</code>","text":"<p>(self) -&gt; list[DNest4::ContinuousDistribution]</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.KO_Pprior","title":"<code>KO_Pprior</code>  <code>property</code>","text":"<p>(self) -&gt; list[DNest4::ContinuousDistribution]</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.KO_eprior","title":"<code>KO_eprior</code>  <code>property</code>","text":"<p>(self) -&gt; list[DNest4::ContinuousDistribution]</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.KO_phiprior","title":"<code>KO_phiprior</code>  <code>property</code>","text":"<p>(self) -&gt; list[DNest4::ContinuousDistribution]</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.KO_qprior","title":"<code>KO_qprior</code>  <code>property</code>","text":"<p>(self) -&gt; list[DNest4::ContinuousDistribution]</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.KO_wdotprior","title":"<code>KO_wdotprior</code>  <code>property</code>","text":"<p>(self) -&gt; list[DNest4::ContinuousDistribution]</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.KO_wprior","title":"<code>KO_wprior</code>  <code>property</code>","text":"<p>(self) -&gt; list[DNest4::ContinuousDistribution]</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.binary_mass","title":"<code>binary_mass</code>  <code>property</code>","text":"<p>secondary mass [Msun]</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.binary_radius","title":"<code>binary_radius</code>  <code>property</code>","text":"<p>secondary radius [Rsun]</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.conditional","title":"<code>conditional</code>  <code>property</code>","text":"<p>(self) -&gt; kima.RVmodel.RVConditionalPrior</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.cubic_prior","title":"<code>cubic_prior</code>  <code>property</code>","text":"<p>Prior for the cubic coefficient of the trend</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.degree","title":"<code>degree</code>  <code>property</code>","text":"<p>degree of the polynomial trend</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.double_lined","title":"<code>double_lined</code>  <code>property</code>","text":"<p>whether the data is for a double lined binary, and has two sets of RVs for each epoch</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.enforce_stability","title":"<code>enforce_stability</code>  <code>property</code>","text":"<p>whether to enforce AMD-stability</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.known_object","title":"<code>known_object</code>  <code>property</code>","text":"<p>whether to include (better) known extra Keplerian curve(s), should be true for BINARIESmodel</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.n_known_object","title":"<code>n_known_object</code>  <code>property</code>","text":"<p>how many known objects, should be &gt;=1 for BINARIESmodel</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.nu_prior","title":"<code>nu_prior</code>  <code>property</code>","text":"<p>Prior for the degrees of freedom of the Student-t likelihood</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.offsets_prior","title":"<code>offsets_prior</code>  <code>property</code>","text":"<p>Common prior for the between-instrument offsets</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.quadr_prior","title":"<code>quadr_prior</code>  <code>property</code>","text":"<p>Prior for the quadratic coefficient of the trend</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.relativistic_correction","title":"<code>relativistic_correction</code>  <code>property</code>","text":"<p>whether to perform the GR correction</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.slope_prior","title":"<code>slope_prior</code>  <code>property</code>","text":"<p>Prior for the slope</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.star_mass","title":"<code>star_mass</code>  <code>property</code>","text":"<p>primary mass [Msun]</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.star_radius","title":"<code>star_radius</code>  <code>property</code>","text":"<p>primary radius [Rsun]</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.studentt","title":"<code>studentt</code>  <code>property</code>","text":"<p>use a Student-t distribution for the likelihood (instead of Gaussian)</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.tidal_correction","title":"<code>tidal_correction</code>  <code>property</code>","text":"<p>whether to perform the tidal correction</p>"},{"location":"docs/API/kima/#kima.BINARIESmodel.BINARIESmodel.trend","title":"<code>trend</code>  <code>property</code>","text":"<p>whether the model includes a polynomial trend</p>"},{"location":"docs/API/kima/#example_2","title":"Example:","text":"<pre><code>import kima\n\nkima.run(model, steps=1000, num_threads=4)\n</code></pre> <code>kima.run</code> API <p>Run the DNest4 sampler with the given model</p> <p>Parameters:</p> Name Type Description Default <code>m</code> <code>(RVmodel, GPmodel, ...)</code> <p>The model</p> required <code>steps</code> <code>int</code> <p>How many steps to run. Default is 100.</p> required <code>num_threads</code> <code>int</code> <p>How many threads to use for parallel processing. Default is 1.</p> required <code>num_particles</code> <code>int</code> <p>Number of MCMC particles. Default is 1.</p> required <code>new_level_interval</code> <code>int</code> <p>Number of steps required to create a new level. Default is 2000.</p> required <code>save_interval</code> <code>int</code> <p>Number of steps between saves. Default is 100.</p> required <code>thread_steps</code> <code>int</code> <p>Number of independent steps on each thread. Default is 10.</p> required <code>max_num_levels</code> <code>int</code> <p>Maximum number of levels, or 0 if it should be determined automatically. Default is 0.</p> required <code>lambda_</code> <code>int</code> <p>DOC. Default is 10.0</p> required <code>beta</code> <code>int</code> <p>DOC. Default is 100.0,</p> required <code>compression</code> <code>int</code> <p>DOC. Default is exp(1.0)</p> required <code>seed</code> <code>int</code> <p>Random number seed value, or 0 to use current time. Default is 0.</p> required <code>print_thin</code> <code>int</code> <p>Thinning steps for terminal output. Default is 50.</p> required <p>The <code>distributions</code> sub-package contains the implementation of several probability distributions  that can be used as priors for a model parameter. All distributions have standard parameterizations,  as you would find e.g. in Wikipedia. Some distributions have a corresponding  <code>Truncated</code> version which truncates the support of the distribution to an interval \\([{\\rm lower}, {\\rm upper}]\\).</p>"},{"location":"docs/API/kima/#example_3","title":"Example:","text":"<pre><code>from kima import distributions\n\nparameter_prior = distributions.Gaussian(10, 1)\n</code></pre> <code>kima.distributions</code> API <p>Finally, even though it sits at the core of what kima does, is the keplerian function:</p> <code>kima.keplerian</code> API <p>keplerian(t: list[float], P: float, K: float, ecc: float, w: float, M0: float, M0_epoch: float) -&gt; list[float]</p> <p>Calculate the Keplerian curve at times <code>t</code></p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>array</code> <p>Times at which to calculate the Keplerian function</p> required <code>P</code> <code>float</code> <p>Orbital period [days]</p> required <code>K</code> <code>float</code> <p>Semi-amplitude</p> required <code>ecc</code> <code>float</code> <p>Orbital eccentricity</p> required <code>w</code> <code>float</code> <p>Argument of periastron [rad]</p> required <code>M0</code> <code>float</code> <p>Mean anomaly at the epoch [rad]</p> required <code>M0_epoch</code> <code>float</code> <p>Reference epoch for the mean anomaly (M=0 at this time) [days]</p> required <p>Returns:</p> Name Type Description <code>v</code> <code>array</code> <p>Keplerian function evaluated at input times <code>t</code></p>"},{"location":"docs/API/kima/#kima.distributions.Cauchy","title":"<code>Cauchy</code>","text":"<p>             Bases: <code>kima.distributions.Distribution</code></p> <p>Cauchy distribution</p>"},{"location":"docs/API/kima/#kima.distributions.Cauchy.loc","title":"<code>loc: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.Cauchy.scale","title":"<code>scale: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.Cauchy.cdf","title":"<code>cdf()</code>  <code>method descriptor</code>","text":"<p>cdf(self, x: float) -&gt; float</p> <p>Cumulative distribution function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.Cauchy.logpdf","title":"<code>logpdf()</code>  <code>method descriptor</code>","text":"<p>logpdf(self, x: float) -&gt; float</p> <p>Log of the probability density function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.Cauchy.ppf","title":"<code>ppf()</code>  <code>method descriptor</code>","text":"<p>ppf(self, q: float) -&gt; float</p> <p>Percent point function (inverse of cdf) evaluated at <code>q</code></p>"},{"location":"docs/API/kima/#kima.distributions.Exponential","title":"<code>Exponential</code>","text":"<p>             Bases: <code>kima.distributions.Distribution</code></p> <p>Exponential distribution</p>"},{"location":"docs/API/kima/#kima.distributions.Exponential.cdf","title":"<code>cdf()</code>  <code>method descriptor</code>","text":"<p>cdf(self, x: float) -&gt; float</p> <p>Cumulative distribution function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.Exponential.logpdf","title":"<code>logpdf()</code>  <code>method descriptor</code>","text":"<p>logpdf(self, x: float) -&gt; float</p> <p>Log of the probability density function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.Exponential.ppf","title":"<code>ppf()</code>  <code>method descriptor</code>","text":"<p>ppf(self, q: float) -&gt; float</p> <p>Percent point function (inverse of cdf) evaluated at <code>q</code></p>"},{"location":"docs/API/kima/#kima.distributions.Fixed","title":"<code>Fixed</code>","text":"<p>             Bases: <code>kima.distributions.Distribution</code></p> <p>'Fixed' distribution</p>"},{"location":"docs/API/kima/#kima.distributions.Fixed.val","title":"<code>val: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.Fixed.cdf","title":"<code>cdf()</code>  <code>method descriptor</code>","text":"<p>cdf(self, x: float) -&gt; float</p> <p>Cumulative distribution function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.Fixed.logpdf","title":"<code>logpdf()</code>  <code>method descriptor</code>","text":"<p>logpdf(self, x: float) -&gt; float</p> <p>Log of the probability density function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.Fixed.ppf","title":"<code>ppf()</code>  <code>method descriptor</code>","text":"<p>ppf(self, q: float) -&gt; float</p> <p>Percent point function (inverse of cdf) evaluated at <code>q</code></p>"},{"location":"docs/API/kima/#kima.distributions.Gaussian","title":"<code>Gaussian</code>","text":"<p>             Bases: <code>kima.distributions.Distribution</code></p> <p>Gaussian distribution</p>"},{"location":"docs/API/kima/#kima.distributions.Gaussian.loc","title":"<code>loc: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.Gaussian.scale","title":"<code>scale: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.Gaussian.cdf","title":"<code>cdf()</code>  <code>method descriptor</code>","text":"<p>cdf(self, x: float) -&gt; float</p> <p>Cumulative distribution function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.Gaussian.logpdf","title":"<code>logpdf()</code>  <code>method descriptor</code>","text":"<p>logpdf(self, x: float) -&gt; float</p> <p>Log of the probability density function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.Gaussian.ppf","title":"<code>ppf()</code>  <code>method descriptor</code>","text":"<p>ppf(self, q: float) -&gt; float</p> <p>Percent point function (inverse of cdf) evaluated at <code>q</code></p>"},{"location":"docs/API/kima/#kima.distributions.Kumaraswamy","title":"<code>Kumaraswamy</code>","text":"<p>             Bases: <code>kima.distributions.Distribution</code></p> <p>Kumaraswamy distribution (similar to a Beta distribution)</p>"},{"location":"docs/API/kima/#kima.distributions.Kumaraswamy.a","title":"<code>a: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.Kumaraswamy.b","title":"<code>b: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.Kumaraswamy.cdf","title":"<code>cdf()</code>  <code>method descriptor</code>","text":"<p>cdf(self, x: float) -&gt; float</p> <p>Cumulative distribution function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.Kumaraswamy.logpdf","title":"<code>logpdf()</code>  <code>method descriptor</code>","text":"<p>logpdf(self, x: float) -&gt; float</p> <p>Log of the probability density function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.Kumaraswamy.ppf","title":"<code>ppf()</code>  <code>method descriptor</code>","text":"<p>ppf(self, q: float) -&gt; float</p> <p>Percent point function (inverse of cdf) evaluated at <code>q</code></p>"},{"location":"docs/API/kima/#kima.distributions.Laplace","title":"<code>Laplace</code>","text":"<p>             Bases: <code>kima.distributions.Distribution</code></p> <p>Laplace distribution</p>"},{"location":"docs/API/kima/#kima.distributions.Laplace.loc","title":"<code>loc: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.Laplace.scale","title":"<code>scale: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.Laplace.cdf","title":"<code>cdf()</code>  <code>method descriptor</code>","text":"<p>cdf(self, x: float) -&gt; float</p> <p>Cumulative distribution function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.Laplace.logpdf","title":"<code>logpdf()</code>  <code>method descriptor</code>","text":"<p>logpdf(self, x: float) -&gt; float</p> <p>Log of the probability density function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.Laplace.ppf","title":"<code>ppf()</code>  <code>method descriptor</code>","text":"<p>ppf(self, q: float) -&gt; float</p> <p>Percent point function (inverse of cdf) evaluated at <code>q</code></p>"},{"location":"docs/API/kima/#kima.distributions.LogUniform","title":"<code>LogUniform</code>","text":"<p>             Bases: <code>kima.distributions.Distribution</code></p> <p>LogUniform distribution (sometimes called reciprocal or Jeffrey's distribution)</p>"},{"location":"docs/API/kima/#kima.distributions.LogUniform.lower","title":"<code>lower: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.LogUniform.upper","title":"<code>upper: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.LogUniform.cdf","title":"<code>cdf()</code>  <code>method descriptor</code>","text":"<p>cdf(self, x: float) -&gt; float</p> <p>Cumulative distribution function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.LogUniform.logpdf","title":"<code>logpdf()</code>  <code>method descriptor</code>","text":"<p>logpdf(self, x: float) -&gt; float</p> <p>Log of the probability density function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.LogUniform.ppf","title":"<code>ppf()</code>  <code>method descriptor</code>","text":"<p>ppf(self, q: float) -&gt; float</p> <p>Percent point function (inverse of cdf) evaluated at <code>q</code></p>"},{"location":"docs/API/kima/#kima.distributions.ModifiedLogUniform","title":"<code>ModifiedLogUniform</code>","text":"<p>             Bases: <code>kima.distributions.Distribution</code></p> <p>ModifiedLogUniform distribution</p>"},{"location":"docs/API/kima/#kima.distributions.ModifiedLogUniform.knee","title":"<code>knee: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.ModifiedLogUniform.upper","title":"<code>upper: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.ModifiedLogUniform.cdf","title":"<code>cdf()</code>  <code>method descriptor</code>","text":"<p>cdf(self, x: float) -&gt; float</p> <p>Cumulative distribution function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.ModifiedLogUniform.logpdf","title":"<code>logpdf()</code>  <code>method descriptor</code>","text":"<p>logpdf(self, x: float) -&gt; float</p> <p>Log of the probability density function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.ModifiedLogUniform.ppf","title":"<code>ppf()</code>  <code>method descriptor</code>","text":"<p>ppf(self, q: float) -&gt; float</p> <p>Percent point function (inverse of cdf) evaluated at <code>q</code></p>"},{"location":"docs/API/kima/#kima.distributions.RNG","title":"<code>RNG</code>","text":"<p>None</p>"},{"location":"docs/API/kima/#kima.distributions.RNG.rand","title":"<code>rand()</code>  <code>method descriptor</code>","text":"<p>rand(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.RNG.rand_int","title":"<code>rand_int()</code>  <code>method descriptor</code>","text":"<p>rand_int(self, arg: int, /) -&gt; int</p>"},{"location":"docs/API/kima/#kima.distributions.Rayleigh","title":"<code>Rayleigh</code>","text":"<p>             Bases: <code>kima.distributions.Distribution</code></p> <p>Rayleigh distribution</p>"},{"location":"docs/API/kima/#kima.distributions.Rayleigh.scale","title":"<code>scale: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.Rayleigh.cdf","title":"<code>cdf()</code>  <code>method descriptor</code>","text":"<p>cdf(self, x: float) -&gt; float</p> <p>Cumulative distribution function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.Rayleigh.logpdf","title":"<code>logpdf()</code>  <code>method descriptor</code>","text":"<p>logpdf(self, x: float) -&gt; float</p> <p>Log of the probability density function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.Rayleigh.ppf","title":"<code>ppf()</code>  <code>method descriptor</code>","text":"<p>ppf(self, q: float) -&gt; float</p> <p>Percent point function (inverse of cdf) evaluated at <code>q</code></p>"},{"location":"docs/API/kima/#kima.distributions.Triangular","title":"<code>Triangular</code>","text":"<p>             Bases: <code>kima.distributions.Distribution</code></p> <p>Triangular distribution</p>"},{"location":"docs/API/kima/#kima.distributions.Triangular.center","title":"<code>center: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.Triangular.lower","title":"<code>lower: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.Triangular.upper","title":"<code>upper: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.Triangular.cdf","title":"<code>cdf()</code>  <code>method descriptor</code>","text":"<p>cdf(self, x: float) -&gt; float</p> <p>Cumulative distribution function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.Triangular.logpdf","title":"<code>logpdf()</code>  <code>method descriptor</code>","text":"<p>logpdf(self, x: float) -&gt; float</p> <p>Log of the probability density function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.Triangular.ppf","title":"<code>ppf()</code>  <code>method descriptor</code>","text":"<p>ppf(self, q: float) -&gt; float</p> <p>Percent point function (inverse of cdf) evaluated at <code>q</code></p>"},{"location":"docs/API/kima/#kima.distributions.TruncatedCauchy","title":"<code>TruncatedCauchy</code>","text":"<p>             Bases: <code>kima.distributions.Distribution</code></p> <p>docs</p>"},{"location":"docs/API/kima/#kima.distributions.TruncatedCauchy.loc","title":"<code>loc: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.TruncatedCauchy.lower","title":"<code>lower: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.TruncatedCauchy.scale","title":"<code>scale: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.TruncatedCauchy.upper","title":"<code>upper: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.TruncatedCauchy.cdf","title":"<code>cdf()</code>  <code>method descriptor</code>","text":"<p>cdf(self, x: float) -&gt; float</p> <p>Cumulative distribution function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.TruncatedCauchy.logpdf","title":"<code>logpdf()</code>  <code>method descriptor</code>","text":"<p>logpdf(self, x: float) -&gt; float</p> <p>Log of the probability density function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.TruncatedCauchy.ppf","title":"<code>ppf()</code>  <code>method descriptor</code>","text":"<p>ppf(self, q: float) -&gt; float</p> <p>Percent point function (inverse of cdf) evaluated at <code>q</code></p>"},{"location":"docs/API/kima/#kima.distributions.TruncatedExponential","title":"<code>TruncatedExponential</code>","text":"<p>             Bases: <code>kima.distributions.Distribution</code></p> <p>Exponential distribution truncated to [lower, upper]</p>"},{"location":"docs/API/kima/#kima.distributions.TruncatedExponential.lower","title":"<code>lower: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.TruncatedExponential.scale","title":"<code>scale: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.TruncatedExponential.upper","title":"<code>upper: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.TruncatedExponential.cdf","title":"<code>cdf()</code>  <code>method descriptor</code>","text":"<p>cdf(self, x: float) -&gt; float</p> <p>Cumulative distribution function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.TruncatedExponential.logpdf","title":"<code>logpdf()</code>  <code>method descriptor</code>","text":"<p>logpdf(self, x: float) -&gt; float</p> <p>Log of the probability density function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.TruncatedExponential.ppf","title":"<code>ppf()</code>  <code>method descriptor</code>","text":"<p>ppf(self, q: float) -&gt; float</p> <p>Percent point function (inverse of cdf) evaluated at <code>q</code></p>"},{"location":"docs/API/kima/#kima.distributions.TruncatedRayleigh","title":"<code>TruncatedRayleigh</code>","text":"<p>             Bases: <code>kima.distributions.Distribution</code></p> <p>Rayleigh distribution truncated to [lower, upper]</p>"},{"location":"docs/API/kima/#kima.distributions.TruncatedRayleigh.lower","title":"<code>lower: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.TruncatedRayleigh.scale","title":"<code>scale: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.TruncatedRayleigh.upper","title":"<code>upper: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.TruncatedRayleigh.cdf","title":"<code>cdf()</code>  <code>method descriptor</code>","text":"<p>cdf(self, x: float) -&gt; float</p> <p>Cumulative distribution function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.TruncatedRayleigh.logpdf","title":"<code>logpdf()</code>  <code>method descriptor</code>","text":"<p>logpdf(self, x: float) -&gt; float</p> <p>Log of the probability density function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.TruncatedRayleigh.ppf","title":"<code>ppf()</code>  <code>method descriptor</code>","text":"<p>ppf(self, q: float) -&gt; float</p> <p>Percent point function (inverse of cdf) evaluated at <code>q</code></p>"},{"location":"docs/API/kima/#kima.distributions.Uniform","title":"<code>Uniform</code>","text":"<p>             Bases: <code>kima.distributions.Distribution</code></p> <p>Uniform distribuion in [lower, upper]</p>"},{"location":"docs/API/kima/#kima.distributions.Uniform.lower","title":"<code>lower: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.Uniform.upper","title":"<code>upper: float</code>  <code>property</code>","text":"<p>(self) -&gt; float</p>"},{"location":"docs/API/kima/#kima.distributions.Uniform.cdf","title":"<code>cdf()</code>  <code>method descriptor</code>","text":"<p>cdf(self, x: float) -&gt; float</p> <p>Cumulative distribution function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.Uniform.logpdf","title":"<code>logpdf()</code>  <code>method descriptor</code>","text":"<p>logpdf(self, x: float) -&gt; float</p> <p>Log of the probability density function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.Uniform.ppf","title":"<code>ppf()</code>  <code>method descriptor</code>","text":"<p>ppf(self, q: float) -&gt; float</p> <p>Percent point function (inverse of cdf) evaluated at <code>q</code></p>"},{"location":"docs/API/kima/#kima.distributions.UniformAngle","title":"<code>UniformAngle</code>","text":"<p>             Bases: <code>kima.distributions.Distribution</code></p> <p>Uniform distribuion in [0, 2*PI]</p>"},{"location":"docs/API/kima/#kima.distributions.UniformAngle.cdf","title":"<code>cdf()</code>  <code>method descriptor</code>","text":"<p>cdf(self, x: float) -&gt; float</p> <p>Cumulative distribution function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.UniformAngle.logpdf","title":"<code>logpdf()</code>  <code>method descriptor</code>","text":"<p>logpdf(self, x: float) -&gt; float</p> <p>Log of the probability density function evaluated at <code>x</code></p>"},{"location":"docs/API/kima/#kima.distributions.UniformAngle.ppf","title":"<code>ppf()</code>  <code>method descriptor</code>","text":"<p>ppf(self, q: float) -&gt; float</p> <p>Percent point function (inverse of cdf) evaluated at <code>q</code></p>"},{"location":"docs/API/pykima/","title":"API documentation for <code>pykima</code>","text":"<p>kima itself is written in C++, to leverage the increased performance.  The Python bindings created with nanobind expose most of the functionality of the data (RVData)  and model classes (e.g. RVmodel, GPmodel, etc.), as well as the sampler (kima.run).</p> <p>To analyse the results and create figures, the <code>pykima</code> sub-package was created. It can be used in an IPython shell, a Jupyter notebook, or the standard Python interpreter.</p>"},{"location":"docs/examples/","title":"Examples","text":"<p>kima provides several examples showing the analysis of standard datasets and some best practices.  Each example is implemented as a function which creates, and optionally runs, a given model. They can all be accessed through the <code>examples</code> module</p> <pre><code>from kima import examples\n</code></pre> <p>or directly</p> <pre><code>from kima.examples import multi_instrument\n</code></pre> <p>The following pages describe each example in some depth:</p> <ul> <li>_51Peg (note the <code>_</code> here, so the function can be a valid Python name)</li> <li>multi_instrument</li> </ul>"},{"location":"docs/examples/51Peg/","title":"51Peg","text":"In\u00a0[\u00a0]: Copied!"},{"location":"docs/examples/multi_instrument/","title":"Multiple instruments","text":"<p>It is quite typical to have RV observations from more than one instrument. These data should be analysed together for the detection of planets.</p> Note <p> <ul> <li>             Considering RVs from multiple instruments means adding new offset parameters to the model.             By default, all these parameters share the same prior, but we'll see below how to change this.         </li> <li>             The same applies to the additional white noise (jitter).             One jitter parameter is added per instrument, all sharing the same prior.         </li> </ul> </p> New <p>     Newer versions of kima now allow for a stellar jitter parameter      which is shared between all the instruments. By default, this parameter is fixed to zero      to recover the old behaviour.     </p> <p>First of all, let's import the package</p> In\u00a0[1]: Copied! <pre>import kima\n</pre> import kima <p>Each of the datasets can be imported like this</p> In\u00a0[2]: Copied! <pre>from kima.examples.multi_instruments import HD106252_ELODIE\n</pre> from kima.examples.multi_instruments import HD106252_ELODIE <p>and a simple visualisation of the RVs is provided by the <code>plot</code> method</p> In\u00a0[3]: Copied! <pre>HD106252_ELODIE.plot();\n</pre> HD106252_ELODIE.plot(); <p>The combined data is also readily available</p> In\u00a0[4]: Copied! <pre>from kima.examples.multi_instruments import HD106252_combined\n\nHD106252_combined.plot();\n</pre> from kima.examples.multi_instruments import HD106252_combined  HD106252_combined.plot(); <p>Note the clear offset between ELODIE data (in blue above) and the other datasets. The average RV has been subtracted from the HET, HJS, and Lick data, but not from ELODIE. This slightly convoluted situation is ideal to demonstrate how kima deals with multiple instruments, especially with the default priors.</p> <p>We can now use one of the available models to analyse this dataset. We can either create the model</p> In\u00a0[5]: Copied! <pre>from kima import RVmodel\n\nmodel = RVmodel(fix=False, npmax=1, data=HD106252_combined)\n</pre> from kima import RVmodel  model = RVmodel(fix=False, npmax=1, data=HD106252_combined) <p>or import the <code>multi_instruments</code> function from the examples, which does the same thing (but can also run the model directly)</p> In\u00a0[6]: Copied! <pre>from kima.examples import multi_instruments\n\nmodel = multi_instruments(run=False)\n</pre> from kima.examples import multi_instruments  model = multi_instruments(run=False) <p>Notice how we set the number of planets to be free, implicitly assigning to it a uniform prior between 0 and 1 (by setting <code>npmax=1</code>).</p> <p>This is all that is necessary to setup the data and model, and we are now ready to run the analysis. Notice that we didn't explicitly assign any priors (except for the number of planets). This means kima will use all the default priors.</p> <p>Let's run the model for a few thousand steps and load the results</p> In\u00a0[7]: Copied! <pre>model, res = multi_instruments(run=True, load=True, steps=30_000)\n</pre> model, res = multi_instruments(run=True, load=True, steps=30_000) <pre>log(Z) = -498.67164265769134\nInformation = 67.6310091586351 nats.\nEffective sample size = 2984.7236142899683\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2984/2984 [00:00&lt;00:00, 8048.22it/s]\n</pre> <p>Did we find HD106252 b?</p> In\u00a0[8]: Copied! <pre>res.plot_posterior_np();\n</pre> res.plot_posterior_np(); <pre>Np probability ratios:  []\n</pre> <p>Yes! In fact, even though the $N_p$ parameter was free, all the samples have $N_p=1$ because the posterior probability is so much higher than for $N_p=0$. So we're pretty sure about this detection. How does the fit look?</p> In\u00a0[9]: Copied! <pre>res.plot_random_samples();\n</pre> res.plot_random_samples(); <p>The <code>plot_random_samples</code> function just shows the Keplerian curves from a few random posterior samples, together with the data. Note that the RV offsets for each instrument are not subtracted from the data. This is on purpose: since we're showing several posterior samples (50 by default), there are actually several values for the offsets. Zooming in on one particular dataset helps (note the several blue curves):</p> In\u00a0[10]: Copied! <pre>fig = res.plot_random_samples();\nfig.axes[0].set_ylim(9600, 10200);\n</pre> fig = res.plot_random_samples(); fig.axes[0].set_ylim(9600, 10200); <p>Looking at the posterior for the orbital period, semi-amplitude, and eccentricity of the planet clearly shows that the default priors are a bit too wide</p> In\u00a0[11]: Copied! <pre>res.plot_posterior_PKE(show_prior=True);\n</pre> res.plot_posterior_PKE(show_prior=True); <p>The situation is similar for the systemic velocity and for the RV offsets, as evidenced in the plots below, where we might not even see the posterior!</p> In\u00a0[12]: Copied! <pre>res.hist_vsys(show_prior=True)\n</pre> res.hist_vsys(show_prior=True) Out[12]: <pre>[&lt;Figure size 640x480 with 1 Axes&gt;, &lt;Figure size 1100x500 with 3 Axes&gt;]</pre> <p>but they're there:</p> In\u00a0[13]: Copied! <pre>res.hist_vsys();\n</pre> res.hist_vsys(); <p>What we see here is that kima tries very hard to have default priors which will be appropriate for every RV dataset. However, this does sometimes mean that the priors are way too wide, which might hurt the performance of the sampler.</p> <p>These issues can be easily solved by setting slightly more informative priors for the RV offsets and some of the orbital parameters. We'll use a couple of helper functions available in <code>pykima.utils</code> to assign appropriate Gaussian priors.</p> In\u00a0[14]: Copied! <pre>from kima.pykima.utils import (get_gaussian_prior_vsys, \n                               get_gaussian_priors_individual_offsets)\n</pre> from kima.pykima.utils import (get_gaussian_prior_vsys,                                 get_gaussian_priors_individual_offsets) In\u00a0[15]: Copied! <pre>model.Cprior = get_gaussian_prior_vsys(model.data, use_std=True)\nmodel.Cprior\n</pre> model.Cprior = get_gaussian_prior_vsys(model.data, use_std=True) model.Cprior Out[15]: <pre>Gaussian(62; 102.095)</pre> In\u00a0[16]: Copied! <pre>model.individual_offset_prior = get_gaussian_priors_individual_offsets(model.data, use_std=True)\nmodel.individual_offset_prior\n</pre> model.individual_offset_prior = get_gaussian_priors_individual_offsets(model.data, use_std=True) model.individual_offset_prior Out[16]: <pre>[Gaussian(15518.5; 96.3933),\n Gaussian(-71.9; 59.0117),\n Gaussian(-65.4; 61.2813)]</pre> <p>and also set a narrower prior for the semi-amplitude</p> In\u00a0[17]: Copied! <pre>model.conditional.Kprior = kima.distributions.Uniform(0, 500)\n</pre> model.conditional.Kprior = kima.distributions.Uniform(0, 500) <p>Let's run the model again using the new priors</p> In\u00a0[18]: Copied! <pre>kima.run(model, steps=30_000, num_threads=4)\n</pre> kima.run(model, steps=30_000, num_threads=4) In\u00a0[21]: Copied! <pre>res = kima.load_results()\n</pre> res = kima.load_results() <pre>log(Z) = -470.77601559796693\nInformation = 41.027161549708126 nats.\nEffective sample size = 3207.732713141128\n</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3207/3207 [00:00&lt;00:00, 11334.12it/s]\n</pre> <p>The priors for the systemic velocity and RV offsets are still relatively wide but much more comparable to the posteriors</p> In\u00a0[26]: Copied! <pre>res.hist_vsys(show_prior=True);\n</pre> res.hist_vsys(show_prior=True); <p>and for the orbital parameters</p> In\u00a0[23]: Copied! <pre>res.plot_posterior_PKE(show_prior=True);\n</pre> res.plot_posterior_PKE(show_prior=True); <p>In any case, the orbital parameters of HD106252 b are well recovered. The maximum likelihood solution provides an excellent fit to the data.</p> In\u00a0[24]: Copied! <pre>p = res.maximum_likelihood_sample()\nres.phase_plot(p);\n</pre> p = res.maximum_likelihood_sample() res.phase_plot(p); <pre>Sample with the highest likelihood value (logL = -422.84)\n-&gt; might not be representative of the full posterior distribution\n\njitter:\n[ 0.          6.40600629  0.92606019 10.59487361  3.81708227]\nnumber of planets:  1\norbital parameters:           P           K          M0           e           \u03c9 \n                     1532.14695   140.23845     0.72411     0.48398     5.10110\ninstrument offsets:  (relative to Lick) \n                     ELODIE                HET                   HJS                  \n                     15519.108             -98.130               -84.104              \nvsys:  6.95947983\n0 1 1\n</pre> Warning <p>     In this example, we used some properties of the data to assign priors for a few parameters.     Some Bayesians might not agree with this and, in general, they would be right.      However, note in the figures above for the original analysis how there's just no posterior      mass across very very wide regions of the prior. Upon realizing this, we tried to come up      with more informative priors. That means that, in essence, we just performed a prior      sensitivity analysis, and concluded that the posterior estimates for the parameters were consistent.     </p> <p>     Note also that this is very different from setting a prior for the orbital period     based on a periodogram analysis, for example, which is almost never justified.     </p>"},{"location":"docs/examples/multi_instrument/#multiple-instruments","title":"Multiple instruments\u00b6","text":""},{"location":"docs/examples/multi_instrument/#detecting-the-planet-around-hd106252","title":"Detecting the planet around HD106252\u00b6","text":"<p>First announced by Fischer et al. (2002), the giant planet orbiting HD106252 has been detected with a number of different instruments (Perrier et al. 2003, Butler et al. 2006, Wittenmyer et al.2009). In this example, we look at data from ELODIE, HET, HJS, and Lick.</p>"}]}